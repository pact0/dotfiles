#!/bin/bash

SOURCE_DIR=$(chezmoi source-path)

. "$SOURCE_DIR/scripts/utils"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

declare -r INSTALLED_PACKAGES=$((which yay &> /dev/null && [ ! $? -eq 0 ]) || yay -Q)

install_tmux_plugin_manager() {
  script_path="$HOME/.tmux/plugins/tpm"

  if [ ! -f "$script_path" ]; then
  execute "git clone https://github.com/tmux-plugins/tpm $script_path" "Install TMUX plugin manager"
  fi
}

install_neovim() {
  script_path="$HOME/neovim"

  if [ ! -f "$script_path" ]; then
  execute "git clone https://github.com/neovim/neovim.git $script_path && sudo make && sudo make install && sudo rm -rf $script_path" "Install neovim"
  fi
}

install_package_manager() {
  execute "(which yay &> /dev/null && [ $? -eq 0 ] ) || (git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si --noconfirm && cd .. && rm -rf yay)" "YAY"
}

enable_multilib() {
  execute "(cat /etc/pacman.conf | grep -q '^\[multilib\]') || sudo sed -i \"/\[multilib\]/,/Include/\"'s/^#//' /etc/pacman.conf" "Enabling multilib"
}

install_nnn_plugins() {
  script_path="$HOME/.config/nnn/plugins/getplugs"

  if [ ! -f "$script_path" ]; then
    wget https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs -O "$script_path"
  fi

  bash "$script_path"

  rm -f "$HOME/.config/nnn/*.tar.gz"

  print_result $? "Install/update nnn plugins"
}

install_package() {
  declare -r PACKAGE="$1"

  if ! package_is_installed "$PACKAGE"; then
    execute "yay -S --noconfirm --needed $PACKAGE" "$PACKAGE"
  else
    print_success "$PACKAGE"
  fi
}

install_fish_plugin() {
  declare -r PACKAGEPATH="$1"
  declare -r PACKAGENAME="$2"

  execute "fish -c \"fisher install $PACKAGEPATH\"" "$PACKAGENAME"
}

update_fish_plugins() {
	execute "fish -c \"fisher update\"" "Update fish plugins"
}

install_go_package() {
  declare -r PACKAGEPATH="$1"
  declare -r PACKAGENAME="$2"

  execute "go install $PACKAGEPATH" "$PACKAGENAME"
}

install_yarn_package() {
  declare -r PACKAGEPATH="$1"
  declare -r PACKAGENAME="$2"

  execute "yarn global add $PACKAGEPATH" "$PACKAGENAME"
}

install_npm_package() {
  declare -r PACKAGENAME="$1"

  execute "npm install -g $PACKAGENAME" "$PACKAGENAME"
}

install_pip_package() {
  declare -r PACKAGENAME="$1"

  execute "pip install --upgrade $PACKAGENAME" "$PACKAGENAME"
}

install_gh_plugin() {
  declare -r PLUGIN="$1"
  declare -r INSTALLED_PLUGINS=$(gh extension list)

  if ! echo $INSTALLED_PLUGINS | grep -q $PLUGIN; then
    execute "gh extension install $PLUGIN" "$PLUGIN"
  else
    print_success "$PLUGIN"
  fi
}

package_is_installed() {
  echo $INSTALLED_PACKAGES | grep -q " $1 "
}

update() {
  yay -Syyu
}

update_hosts() {
  sudo cp /etc/hosts /etc/backup_hosts
  sudo curl https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts -o /etc/hosts
}


clean_up_cache() {
  execute "paccache -rk4 && paccache -ruk1" "Clean up cached packages"
}

clean_up_unused_packages() {
  yay -c
}

install_blackarch_repo() {
  if ! yay -Sg | grep -q "^blackarch" &>/dev/null; then
    execute "curl -s https://blackarch.org/strap.sh | sudo bash" "install blackarch repo"
  fi
}

install_sway() {
  ask_for_confirmation "Do you want to install sway and wayland?\n"
  if answer_is_yes; then
	  print_in_purple "Sway\n"

	  install_package "batsignal"
	  install_package "blueman"
	  install_package "bluez-utils"
	  install_package "brightnessctl"
	  install_package "clipman"
	  install_package "gammastep"
	  install_package "grim"
	  install_package "kanshi"
	  install_package "libappindicator-gtk3"
	  install_package "libnotify"
	  install_package "mako"
	  install_package "materia-gtk-theme"
	  install_package "networkmanager"
	  install_package "pavucontrol"
	  install_package "playerctl"
	  install_package "polkit-kde-agent"
	  install_package "pulsemixer"
	  install_package "qt5-wayland"
	  install_package "slurp"
	  install_package "swappy"
	  install_package "sway"
	  install_package "sway-launcher-desktop"
	  install_package "swayidle"
	  install_package "swaylock-effects-git"
	  install_package "tigervnc"
	  install_package "waybar"
	  install_package "wayvnc"
	  install_package "wdisplays"
	  install_package "wf-recorder"
	  install_package "wl-clipboard"
	  install_package "wl-mirror"
	  install_package "wlr-randr"
	  install_package "wtype"
	  install_package "xdg-desktop-portal"
	  install_package "xdg-desktop-portal-wlr"
	  install_package "xorg-xwayland"
  fi
}

install_drivers() {
	ask_for_confirmation "Do you want to install drivers?\n"
	if answer_is_yes; then
		print_in_purple "Drivers\n"

		install_package "alsa-utils"
		install_package "fwupd"
		install_package "intel-media-driver"
		install_package "mesa"
		install_package "pipewire"
		install_package "pipewire-media-session"
		install_package "sof-firmware"
		install_package "vulkan-intel"
	fi
}

install_kernels() {
	ask_for_confirmation "Do you want to install kernelrs?\n"
	if answer_is_yes; then
		print_in_purple "Linux kernels\n"

		install_package "linux-lts"
		install_package "linux-lts-headers"
		install_package "linux-zen"
		install_package "linux-zen-headers"
	fi
}

install_nvidia() {
	ask_for_confirmation "Do you want to install nvidia?\n"
	if answer_is_yes; then
		print_in_purple "Nvidia\n"

		install_package "nvidia"
		install_package "nvidia-libgl"
		install_package "linux-headers"
		install_package "base-devel"
  fi
}


install_audio() {
	ask_for_confirmation "Do you want to install audio drivers?\n"
	if answer_is_yes; then
		print_in_purple "Pipewire Audio\n"

		install_package "pipewire"
		install_package "wireplumber"
		install_package "lib32-pipewire"
		install_package "pipewire-alsa"
		install_package "pipewire-pulse"
		install_package "pipewire-jack"
		install_package "pavucontrol"
		install_package "playerctl"
		install_package "pavucontrol"
		install_package "sddm-sugar-candy-git"
		install_package "sddm"
  fi
}

install_hyprland() {
  ask_for_confirmation "Install Hyprland"
  if answer_is_yes; then
	  print_in_purple "Hyprland\n"

		install_package "hyprland-nvidia-git"
		install_package "wofi"
		install_package "wofi-wifi-menu"
		install_package "udev-block-notify"
		install_package "dunst"
		install_package "eww-wayland"
		install_package "swayidle"
		install_package "swaylock-effects-git"
		install_package "swaylockd"
		install_package "sway-audio-idle-inhibit-git"
		install_package "pamixer"
		install_package "light-git"
		install_package "playerctl"
		install_package "grim"
		install_package "slurp"
		install_package "wl-clipboard"
		install_package "socat"
		install_package "swappy"
		install_package "cliphist"
		install_package "nm-connection-editor"
		install_package "dictd"
		install_package "wl-clip-persist-git"
		install_package "swww-git"
		install_package "xdg-desktop-portal-hyprland-git"
		install_package "xdg-desktop-portal"
		install_package "qt6-wayland"
		install_package "qt5-wayland"
		install_package "polkit-kde-agent"
		install_package "wlogout"
		install_package "grimblast"
		install_package "kcalc"
  fi
}

spotify_perms() {
  chmod a+wr /opt/spotify
  chmod a+wr /opt/spotify/Apps -R
}
